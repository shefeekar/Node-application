### **Project Overview**

This project automates the containerization and deployment of a Node.js application using Docker and Jenkins. The entire process, from fetching the code to running the application in a container, is managed through a Jenkins pipeline. It also includes a cleanup stage to remove the container after use.

---

### **Working Details**

### **Dockerfile Functionality**

1. **Base Image**:
    - The `Dockerfile` uses `node:latest` as the base image, which provides a pre-configured environment for running Node.js applications.
2. **Application Setup**:
    - Creates a working directory (`WORKDIR /`).
    - Copies the `package.json` file into the container to ensure dependencies can be installed.
    - Installs the required dependencies using `npm install`.
    - Copies the entire application source code into the container.
3. **Port Exposure**:
    - The application is configured to run on port `8081`, which is exposed in the container.
4. **Application Start**:
    - The `CMD ["npm", "start"]` instruction ensures the application starts automatically when the container is run.

---

### **Jenkins Pipeline Functionality**

The pipeline is designed to automate the process of building and running the Docker container for the application. Here's how it works:

1. **Checkout Stage**:
    - **Purpose**: Clones the source code repository from GitHub into the Jenkins workspace.
    - **Process**: Uses the `git` step to fetch the code from the specified repository URL.
    
    Example:
    
    ```groovy
    groovy
    Copy code
    git  'https://github.com/shefeekar/Node-application'
    
    ```
    
2. **Build and Run Stage**:
    - **Purpose**: Builds a Docker image for the application and runs a container from it.
    - **Process**:
        - The `docker.build` command builds a Docker image (`node-hello-world:latest`) using the `Dockerfile` in the repository.
        - The `docker run` command starts a container from the built image, mapping the container's port `8081` to the host's port `8081`.
    
    Example:
    
    ```groovy
    groovy
    Copy code
    def dockerImage = docker.build('node-hello-world:latest')
    sh 'docker run -p 8081:8081 --name node-hello-world node-hello-world:latest'
    
    ```
    
3. **Cleanup Stage**:
    - **Purpose**: Stops and removes the Docker container after execution to free up resources.
    - **Process**:
        - Uses `docker stop` to stop the running container.
        - Uses `docker rm` to remove the container.
        - The `|| true` ensures the pipeline continues even if the container is not running or doesn't exist.
    
    Example:
    
    ```groovy
    groovy
    Copy code
    sh 'docker stop node-hello-world || true'
    sh 'docker rm node-hello-world || true'
    
    ```
    

---

### **How It All Comes Together**

1. **Pipeline Execution**:
    - The Jenkins pipeline orchestrates the entire process, executing each stage sequentially.
2. **Application Availability**:
    - Once the `Build and Run` stage completes, the Node.js application will be accessible via `http://<host-IP>:8081`.
3. **Resource Management**:
    - After the container runs and serves its purpose, the `Cleanup` stage ensures that no unnecessary containers are left running on the system.

---

### **Key Advantages**

- **Automation**: Eliminates manual steps for building and running the application.
- **Reproducibility**: The Docker image ensures consistent application behavior across environments.
- **Efficiency**: Automating the cleanup process helps optimize resource usage.
- **Portability**: The application runs in a container, making it easy to deploy on different systems.

---

Let me know if you'd like further details or have specific areas you'd like me to elaborate on!
